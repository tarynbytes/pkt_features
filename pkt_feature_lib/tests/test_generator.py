# import pytest
import pytest

from ..src.Packet_Feature_Generator import *
from ..src.Features import *
# Generated by CodiumAI

class TestSplit:

    #  Split a list of length n into n sublists
    def test_split_equal_parts(self):
        a = [1, 2, 3, 4, 5, 6]
        n = 3
        expected_result = [[1, 2], [3, 4], [5, 6]]
        assert list(split(a, n)) == expected_result

    #  Split a list of length n into 1 sublist
    def test_split_one_sublist(self):
        a = [1, 2, 3, 4, 5, 6]
        n = 1
        expected_result = [[1, 2, 3, 4, 5, 6]]
        assert list(split(a, n)) == expected_result

    #  n is zero
    def test_split_zero(self):
        a = [1, 2, 3, 4, 5, 6]
        n = 0
        with pytest.raises(ValueError):
            list(split(a, n))

    #  n is greater than the length of the list
    def test_split_greater_than_length(self):
        a = [1, 2, 3, 4, 5, 6]
        n = 7
        with pytest.raises(ValueError):
            list(split(a, n))

    #  List is empty
    def test_split_empty_list(self):
        a = []
        n = 3
        with pytest.raises(ValueError):
            list(split(a, n))


class TestWorkFeatures:

    #  Generates features for a list of Website objects
    def test_generate_features(self):
        websites = [
            Website(1, [10, 20, 30], (1, 2, 3), 100),
            Website(2, [15, 25, 35], (4, 5, 6), 200),
            Website(3, [12, 22, 32], (7, 8, 9), 150)
        ]
        result = work_features(websites)
        assert len(result) == len(websites)
        for website in result:
            assert isinstance(website, Website)
            assert website.features != {}

    #  Handles empty input list
    def test_empty_input_list(self):
        websites = []
        result = work_features(websites)
        assert result == []

    #  Handles Website object with empty packets list
    def test_empty_packets_list(self):
        websites = [
            Website(1, [], (1, 2, 3), 100),
            Website(2, [], (4, 5, 6), 200),
            Website(3, [], (7, 8, 9), 150)
        ]
        result = work_features(websites)
        assert len(result) == len(websites)
        for website in result:
            assert isinstance(website, Website)
            assert website.features != {}

    #  Handles Website object with all zero packets
    def test_all_zero_packets(self):
        websites = [
            Website(1, [0, 0, 0], (1, 2, 3), 100),
            Website(2, [0, 0, 0], (4, 5, 6), 200),
            Website(3, [0, 0, 0], (7, 8, 9), 150)
        ]
        result = work_features(websites)
        assert len(result) == len(websites)
        for website in result:
            assert isinstance(website, Website)
            assert website.features != {}

    #  Handles Website object with all negative packets
    def test_all_negative_packets(self):
        websites = [
            Website(1, [-10, -20, -30], (1, 2, 3), 100),
            Website(2, [-15, -25, -35], (4, 5, 6), 200),
            Website(3, [-12, -22, -32], (7, 8, 9), 150)
        ]
        result = work_features(websites)
        assert len(result) == len(websites)
        for website in result:
            assert isinstance(website, Website)
            assert website.features != {}
